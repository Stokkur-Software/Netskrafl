/*

  TypeScript declarations for Mithril.js and related functionality

  This file was originally auto-generated by tsc and then hand-tuned.

*/

export {
  m, Vnode, CustomVnode, VnodeAttrs,
  Component, ComponentFunc, EventHandler, MithrilEvent, VnodeChildren
};

type mClass = string | typeof Link;

declare function m(cls: ComponentFunc<T>, attrs: T, children?: VnodeChildren): any;
declare function m(cls: mClass, attrs: mAttrs, children: VnodeChildren): any;
declare function m(cls: mClass, children: VnodeChildren): any;
declare function m(cls: mClass, attrs: mAttrs): any;
declare function m(cls: mClass): any;

declare namespace m {
  export { hyperscript as m };
  import trust_1 = hyperscript.trust;
  export { trust_1 as trust };
  import fragment_1 = hyperscript.fragment;
  export { fragment_1 as fragment };
  import mount_1 = mount;
  export { mount_1 as mount };
  export function route(root: HTMLElement, defaultRoute: string, routes: any): any;
  export namespace route {
    const SKIP: {};
    function set(path0: string, data?: any, options?: any): void;
    function get(): any;
    const prefix: string;
    namespace Link {
      function view(vnode5: any): any;
    }
    function param(key4: string): string;
  }
  export { render };
  import redraw_1 = redraw;
  export { redraw_1 as redraw };
  import request_1 = request;
  export { request_1 as request };
  import jsonp_1 = jsonp;
  export { jsonp_1 as jsonp };
  export { parseQueryString };
  export { buildQueryString };
  export { parsePathname };
  export { buildPathname };
  export { Vnode as vnode };
}
declare function hyperscript(selector: any, ...args: any[]): any;
declare namespace hyperscript {
  function trust(html: string): Vnode;
  function fragment(...args: any[]): any;
}
declare function mount(root: HTMLElement, component: any): void;
declare function render(dom: HTMLElement, vnodes: any, redraw: boolean): void;
declare function redraw(): void;
declare namespace redraw {
  export { sync };
}
declare function request(url: string, args: any): any;
declare function jsonp(url: string, args: any): any;
declare function parseQueryString(string: any): {};
declare function buildQueryString(object: any): string;
declare function parsePathname(url: string): {
  path: string;
  params: {};
};
declare function buildPathname(template: any, params: any): any;

interface Vnode {
  tag: string;
  key: string;
  attrs: VnodeAttrs;
  children: Vnode[];
  text: any;
  dom: HTMLElement;
  domSize: any;
  state: any;
  events: any;
  instance: any;
  normalize: (node: any) => any;
  normalizeChildren: (input: any) => any;
}

declare function sync(): void;

interface MithrilEvent extends Event {
  redraw: boolean;
}

interface MithrilDragEvent extends DragEvent {
  redraw: boolean;
}

type EventHandler = (ev?: Event) => void;

// Mithril Vnode attributes
interface VnodeAttrs {
  // Common DOM event handlers
  onmouseover?: (ev?: MouseEvent) => void | boolean;
  onmouseout?: (ev?: MouseEvent) => void | boolean;
  onclick?: (ev?: MouseEvent) => void | boolean;
  onfocus?: EventHandler;
  oninput?: EventHandler;
  onkeypress?: (ev?: KeyboardEvent) => void;
  ondragstart?: (ev?: MithrilDragEvent) => void | boolean;
  ondragenter?: (ev?: MithrilDragEvent) => void | boolean;
  ondragleave?: (ev?: MithrilDragEvent) => void | boolean;
  ondragover?: (ev?: MithrilDragEvent) => void | boolean;
  ondrop?: (ev?: MithrilDragEvent) => void | boolean;
  // Mithril event handlers
  oninit?: (vnode: Vnode) => void;
  oncreate?: (vnode: Vnode) => void;
  onupdate?: (vnode: Vnode) => void;
  // Common HTML element attributes
  key?: string | number;
  class?: string;
  className?: string;
  id?: string;
  name?: string;
  style?: string | object;
  title?: string;
  tabindex?: number;
  href?: string;
  src?: string;
  alt?: string;
  width?: number;
  height?: number;
  border?: number;
  type?: string;
  action?: string;
  method?: string;
  value?: string;
  initialValue?: string;
  checked?: boolean;
  disabled?: boolean;
  placeholder?: string;
  maxlength?: number;
  draggable?: string;
}

interface CustomVnode<T> extends Vnode {
  attrs: T;
}

interface Component<T> {
  view: (vnode: CustomVnode<T>) => m.vnode;
  oninit?: (vnode: CustomVnode<T>) => void;
  oncreate?: (vnode: CustomVnode<T>) => void;
  onupdate?: (vnode: CustomVnode<T>) => void;
  onremove?: (vnode: CustomVnode<T>) => void;
}

type ComponentFunc<T> = (vnode: CustomVnode<T>) => Component<T>;

type VnodeChildren = string | string[] | number | Vnode | Vnode[];

type mAttrs = VnodeAttrs;
